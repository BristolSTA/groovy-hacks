from click.formatting import wrap_text
from pythonosc import udp_client
import click

import tkinter as tk

ip = "192.168.2.22"
#ip="127.0.0.1"
# ip = "192.168.0.70"
port = 53000
client = udp_client.SimpleUDPClient(ip, port)

desk_ip = "192.168.1.7"
desk_port = 8000
desk_client = udp_client.SimpleUDPClient(desk_ip, desk_port)


def load_cue_list(cue_number):
    desk_client.send_message(f"/eos/newevent/cue/{cue_number}/\\/0/load_as_enter", "")


def _stop():
    client.send_message(f"/panic", "")
    print("stop")


def _start(cue_number, timecode, at):
    cue = f"/cue/{cue_number}{'.3' if not timecode else '.2'}"

    if timecode:
        # load_cue_list(cue_number)
        pass
    if at:
        times = at.split(":")
        if len(times) == 1:
            seconds = int(times[0])
        else:
            mins, seconds = times
            seconds = int(mins) * 60 + int(seconds)
        print(f"Sending cue {cue_number} at {seconds} seconds",end="")
        if(timecode):
            print(" with Timecode")
        else:
            print()
        client.send_message(f"{cue}/loadActionAt", seconds)
    client.send_message(f"{cue}/go", "")


@click.group()
def cli():
    """Qlab remote"""
    pass


@cli.command()
@click.argument("cue_number", required=True)
@click.option("--timecode", "-t", default=True, type=bool)
@click.option("--at", "-a", required=False, type=str)
def start(cue_number, timecode, at):
    _start(cue_number, timecode, at)
    value = click.prompt("Stop?", type=bool)
    if value:
        _stop()


@cli.command()
def stop():
    _stop()


def create_gui():
    root = tk.Tk()
    global timecodeEnable
    timecodeEnable =tk.IntVar()

    canvas1 = tk.Canvas(root, width=400, height=300)
    canvas1.pack()

    cue_number_input = tk.Entry(root)
    canvas1.create_window(200, 140, window=cue_number_input)

    second_input = tk.Entry(root)
    min_input = tk.Entry(root)
    second_input.insert(0,"0")
    min_input.insert(0,"0")

    canvas1.create_window(100, 250, window=min_input)
    canvas1.create_window(300, 250, window=second_input)
    canvas1.create_text(200,120,text="Cue number")
    canvas1.create_text(100,270,text="Minuite")
    canvas1.create_text(300,270,text="Seccond")
    

    def go_command():
        global timecodeEnable
        if min_input.get() and second_input.get():
            at = f"{min_input.get()}:{second_input.get()}"
        elif second_input.get():
            at = f"{second_input.get()}"
        elif min_input.get():
            at = f"{min_input.get()}:0"
        else:
            at = None

        _start(
            int(cue_number_input.get()),
            timecodeEnable.get(),
            at,
        )

    def toggle_timecode():
        if timecode_toggle.config("relief")[-1] == "sunken":
            timecode_toggle.config(relief="raised")
        else:
            timecode_toggle.config(relief="sunken")

    timecode_toggle = tk.Checkbutton(
        text="Toggle TC", width=12, variable=timecodeEnable,onvalue=1,offvalue=0, command=toggle_timecode
    )

    canvas1.create_window(200, 205, window=timecode_toggle)

    go = tk.Button(text="Go", command=go_command)
    stop = tk.Button(text="Stop", command=_stop)
    canvas1.create_window(150, 180, window=go)
    canvas1.create_window(250, 180, window=stop)

    def go_event(event):
        go_command()

    def stop_command(event):
        _stop()

    def panic_command(event):
        _stop()
        _stop()

    def toggle_timecode_command(event):
        toggle_timecode()

    root.bind("<Return>", go_event)
    root.bind("<Escape>", stop_command)
    root.bind("p", panic_command)
    root.bind("t", toggle_timecode_command)
    root.mainloop()


if __name__ == "__main__":
    # client.send_message(f"/cue/4/loadActionAt", 10)
    #cli()
    create_gui()
