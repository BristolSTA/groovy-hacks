from click.formatting import wrap_text
from pythonosc import udp_client
import click

import tkinter as tk

#example usage:
#python3 ./danceShowPython.py start 2 --at 100 --tc y

# For example, cue 8 is the video, whereas cue 8.2 launches the timecode,
# and cue 8.3 launches the sound without a timecode
cue_for_video = ''
cue_for_tc = '.2'
cue_for_no_tc = '.3'


mac_ip = "192.168.2.23"
mac_port = 8000
mac_client = udp_client.SimpleUDPClient(mac_ip, mac_port)


def load_cue_list(cue_number):
    desk_client.send_message(f"/eos/newevent/cue/{cue_number}/\\/0/load_as_enter", "")


def _stop():
    mac_client.send_message(f"/panic", "")


def _start(cue_number, timecode, at, video):
    
    if (video==False):
        cue = f"/cue/{cue_number}{cue_for_no_tc if not timecode else cue_for_tc}"
        
        if timecode:
             # load_cue_list(cue_number)
             pass
        if at:
            times = at.split(":")
            if len(times) == 1:
                seconds = int(times[0])
            else:
                mins, seconds = times
                seconds = int(mins) * 60 + int(seconds)
            print(f"Sending cue {cue_number} at {seconds} seconds")
            mac_client.send_message(f"{cue}/loadActionAt", seconds)
   
   
    else:
        cue = f"/cue/{cue_number}"
        print(f"Sending video cue {cue_number}")
        video=False
    
    
    mac_client.send_message(f"{cue}/go", "")


@click.group()
def cli():
    """Qlab remote"""
    pass


@cli.command()
@click.argument("cue_number", required=True)
@click.option("--timecode", "-t", default=True, type=bool)
@click.option("--video", "-v", default=False, type=bool)
@click.option("--at", "-a", required=False, type=str)
def start(cue_number, timecode, at, video):
    _start(cue_number, timecode, at, video)
    if click.confirm("Stop?", default="yes"):
        _stop()


@cli.command()
def stop():
    _stop()
    
def create_gui():
    root = tk.Tk()

    canvas1 = tk.Canvas(root, width=400, height=300)
    canvas1.pack()

    cue_number_input = tk.Entry(root)

    canvas1.create_text(200,50,fill="black",font="Calibri 10",
                        text=f"Use the toggles to select which part of the cue to run from.\n\nIf video is enabled, it will run from <cue>{cue_for_video},\nIf timecode is enabled, it will run from <cue>{cue_for_tc},\nand if timecode is disabled, it will run from <cue>{cue_for_no_tc}.", justify="center")

    canvas1.create_text(200,160,fill="black",font="Calibri 10",
                    text=f"Enter the cue number below:", justify="center")

    canvas1.create_window(200, 182, window=cue_number_input)

    time_input = tk.Entry(root)

    canvas1.create_text(200,252,fill="black",font="Calibri 10",
                text=f"Enter the time to start from below:", justify="center")

    canvas1.create_window(200, 280, window=time_input)

    def go_command():
        global running
        
        if(running == False):
            if time_input.get():
                at = f"{time_input.get()}"
            else:
                at = None

            _start(
                int(cue_number_input.get()),
                timecode_toggle.config("relief")[-1] == "sunken",
                at,
                video_toggle.config("relief")[-1] == "sunken",
            )
            go.config(text="Pause")
            running = True
        else:
            _stop()
            running = False
            go.config(text="Play")

    def toggle_timecode():
        if timecode_toggle.config("relief")[-1] == "sunken":
            timecode_toggle.config(relief="raised")
            timecode_toggle.config(highlightbackground="grey")
        else:
            timecode_toggle.config(relief="sunken")
            timecode_toggle.config(highlightbackground="red")

    timecode_toggle = tk.Button(
        text="Toggle TC", width=10, relief="sunken", command=toggle_timecode, highlightbackground="red",
    )

    canvas1.create_window(130, 120, window=timecode_toggle)

    def toggle_video():
        if video_toggle.config("relief")[-1] == "sunken":
            video_toggle.config(relief="raised")
            video_toggle.config(highlightbackground="grey")
        else:
            video_toggle.config(relief="sunken")
            video_toggle.config(highlightbackground="red")

    video_toggle = tk.Button(
        text="Toggle video", width=10, relief="sunken", command=toggle_video, highlightbackground="red"
    )

    canvas1.create_window(270, 120, window=video_toggle)

    go = tk.Button(text="Play", command=go_command)
    stop = tk.Button(text="Stop", command=_stop)
    canvas1.create_window(250, 217, window=go)
    canvas1.create_window(150, 217, window=stop)

    def go_event(event):
        global running
        
        if (running == False):
            go_command()
        else:
            _stop()
            _stop()
            go.config(text="Play")
            running = False
            
    def stop_command(event):
        global running
        
        _stop()
        running = False

    def panic_command(event):
        global running
        
        _stop()
        _stop()
        running = False

    def toggle_timecode_command(event):
        toggle_timecode()

    def toggle_video_command(event):
        toggle_video()

    root.bind("<Return>", go_event)
    root.bind("<Escape>", panic_command)
    root.bind("p", panic_command)
    root.bind("t", toggle_timecode_command)
    root.bind("v", toggle_video_command)
    root.mainloop()


if __name__ == "__main__":
    running = False
    # mac_client.send_message(f"/cue/4/loadActionAt", 10)
    #cli()
    create_gui()
